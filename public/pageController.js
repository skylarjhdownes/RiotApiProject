// Generated by CoffeeScript 1.10.0
var app;

app = angular.module('potatoApp', []);

app.controller('potatoController', function($scope, $http) {
  var attachChampionsToMatches, attachMatchDataToMatchList, determineWhetherSummonerHasPlayedMoreGamesAsMeleeOrRanged, determineWhetherSummonerPrefersMeleeOrRanged, getChampionByChampId;
  $scope.summoner = {};
  $scope.summonerStats = {};
  $scope.summonerMatchList = {};
  $scope.summonerNameInput = '';
  $http.get("/championData").then(function(response) {
    return $scope.champions = response.data.data;
  });
  getChampionByChampId = function(id) {
    return _.find($scope.champions, "id", id);
  };
  attachChampionsToMatches = function(matches) {
    var j, len, match, ref, results;
    ref = $scope.summonerMatchList.matches;
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      match = ref[j];
      results.push(match.champion = getChampionByChampId(match.champion));
    }
    return results;
  };
  determineWhetherSummonerHasPlayedMoreGamesAsMeleeOrRanged = function(matches) {
    var j, len, match, meleeRangedGames;
    meleeRangedGames = {
      ranged: 0,
      melee: 0
    };
    for (j = 0, len = matches.length; j < len; j++) {
      match = matches[j];
      if (match.champion.stats.attackrange < 200) {
        meleeRangedGames.melee++;
      } else {
        meleeRangedGames.ranged++;
      }
    }
    return meleeRangedGames;
  };
  determineWhetherSummonerPrefersMeleeOrRanged = function(meleeRangedGames) {
    if (meleeRangedGames.ranged > meleeRangedGames.melee) {
      return $scope.meleeRangedPreference = "ranged";
    } else if (meleeRangedGames.ranged < meleeRangedGames.melee) {
      return $scope.meleeRangedPreference = "melee";
    } else {
      return $scope.meleeRangedPreference = "neither ranged nor melee";
    }
  };
  attachMatchDataToMatchList = function(matches) {
    var doTheThing, i, j, len, m, results;
    doTheThing = function(match, index) {
      return $http.get("/matchDetailsById/" + match.matchId).then(function(response) {
        return $scope.summonerMatchList.matches[index].matchData = response.data;
      });
    };
    results = [];
    for (i = j = 0, len = matches.length; j < len; i = ++j) {
      m = matches[i];
      results.push(doTheThing(m, i));
    }
    return results;
  };
  return $scope.getSummonerData = function() {
    return $http.get("/summonerInfoByName/" + $scope.summonerNameInput).then(function(response) {
      $scope.summoner = response.data[$scope.summonerNameInput.toLowerCase()];
      $http.get("/summonerStatsById/" + $scope.summoner.id).then(function(response) {
        return $scope.summonerStats = response.data;
      });
      return $http.get("/summonerMatchListById/" + $scope.summoner.id).then(function(response) {
        var meleeRangedGames;
        $scope.summonerMatchList = response.data;
        $scope.summonerMatchListLength = Object.keys($scope.summonerMatchList);
        attachChampionsToMatches($scope.summonerMatchList);
        meleeRangedGames = determineWhetherSummonerHasPlayedMoreGamesAsMeleeOrRanged($scope.summonerMatchList.matches);
        determineWhetherSummonerPrefersMeleeOrRanged(meleeRangedGames);
        return attachMatchDataToMatchList($scope.summonerMatchList.matches);
      });
    });
  };
});
