// Generated by CoffeeScript 1.10.0
var app;

app = angular.module('leagueApp', []);

app.controller('mainController', function($scope, $http, $q) {
  var attachChampionsToMatches, attachMatchDataToMatchlist, determineIfSummonerWonOrLost, determineWhetherSummonerHasPlayedMoreGamesAsMeleeOrRanged, determineWhetherSummonerPrefersMeleeOrRanged, getChampionByChampId;
  $scope.summoner = {};
  $scope.summonerMatchlist = {};
  $scope.summonerNameInput = '';
  getChampionByChampId = function(id) {
    return _.find($scope.champions, "id", id);
  };
  attachChampionsToMatches = function(matches) {
    var i, len, match, ref, results;
    ref = $scope.summonerMatchlist.matches;
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      match = ref[i];
      results.push(match.champion = getChampionByChampId(match.champion));
    }
    return results;
  };
  determineWhetherSummonerHasPlayedMoreGamesAsMeleeOrRanged = function(matches) {
    var i, len, match, meleeRangedGames;
    meleeRangedGames = {
      ranged: 0,
      melee: 0
    };
    for (i = 0, len = matches.length; i < len; i++) {
      match = matches[i];
      if (match.champion.stats.attackrange < 200) {
        meleeRangedGames.melee++;
      } else {
        meleeRangedGames.ranged++;
      }
    }
    return meleeRangedGames;
  };
  determineWhetherSummonerPrefersMeleeOrRanged = function(meleeRangedGames) {
    if (meleeRangedGames.ranged > meleeRangedGames.melee) {
      return $scope.meleeRangedPreference = "ranged";
    } else if (meleeRangedGames.ranged < meleeRangedGames.melee) {
      return $scope.meleeRangedPreference = "melee";
    } else {
      return $scope.meleeRangedPreference = "neither ranged nor melee";
    }
  };
  determineIfSummonerWonOrLost = function(matchData) {
    var summonerMatchParticipantId;
    summonerMatchParticipantId = _.find(matchData.participantIdentities, "player.summonerId", $scope.summoner.id).participantId;
    return _.find(matchData.participants, "participantId", summonerMatchParticipantId).stats.winner;
  };
  $scope.getSummonerData = function() {
    $scope.gettingMatchData = true;
    return $http.get("/championData").then(function(response) {
      $scope.champions = response.data.data;
      return $http.get("/summonerInfoByName/" + $scope.summonerNameInput).then(function(response) {
        $scope.summoner = response.data[$scope.summonerNameInput.toLowerCase()];
        return $http.get("/summonerMatchlistById/" + $scope.summoner.id).then(function(response) {
          var meleeRangedGames;
          $scope.summonerMatchlist = response.data;
          attachChampionsToMatches($scope.summonerMatchlist);
          meleeRangedGames = determineWhetherSummonerHasPlayedMoreGamesAsMeleeOrRanged($scope.summonerMatchlist.matches);
          determineWhetherSummonerPrefersMeleeOrRanged(meleeRangedGames);
          return attachMatchDataToMatchlist($scope.summonerMatchlist.matches);
        });
      });
    })["finally"](function() {
      return delete $scope.gettingMatchData;
    });
  };
  return attachMatchDataToMatchlist = function(matches) {
    var i, index, len, match, meleeGamesLost, meleeGamesWon, promiseArray, rangedGamesLost, rangedGamesWon;
    meleeGamesWon = 0;
    meleeGamesLost = 0;
    rangedGamesWon = 0;
    rangedGamesLost = 0;
    promiseArray = [];
    for (index = i = 0, len = matches.length; i < len; index = ++i) {
      match = matches[index];
      promiseArray.push($http.get("/matchDetailsById/" + match.matchId));
    }
    return $q.all(promiseArray).then(function(responses) {
      var j, len1, response;
      for (index = j = 0, len1 = responses.length; j < len1; index = ++j) {
        response = responses[index];
        $scope.summonerMatchlist.matches[index].matchData = response.data;
        $scope.summonerMatchlist.matches[index].winner = determineIfSummonerWonOrLost(response.data);
        if ($scope.summonerMatchlist.matches[index].winner && $scope.summonerMatchlist.matches[index].champion.stats.attackrange < 200) {
          meleeGamesWon++;
        } else if (!$scope.summonerMatchlist.matches[index].winner && $scope.summonerMatchlist.matches[index].champion.stats.attackrange < 200) {
          meleeGamesLost++;
        } else if ($scope.summonerMatchlist.matches[index].winner) {
          rangedGamesWon++;
        } else {
          rangedGamesLost++;
        }
      }
      $scope.percentMeleeGamesWon = Math.round(meleeGamesWon / (meleeGamesWon + meleeGamesLost) * 100);
      return $scope.percentRangedGamesWon = Math.round(rangedGamesWon / (rangedGamesWon + rangedGamesLost) * 100);
    });
  };
});
